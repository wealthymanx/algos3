/**
 * Average the values of an grades documents. Return value with only 1 decimal place.
 * 
 * Example: problemOne({CS230: 95, CS250: 89, CS133: 91}) should return 91.7
 * 
 * Values can be numbers or strings. If a value is a string, ignore it.
 * 
 * Numbers will be between 0 and 100. Handle situations where the number is not in this range.
 * 
 * @param {object} obj - The object of class grades.
 * 
 * @returns {number}
 */


 function problemOne(obj)
 {   
     
     let total = 0; 
     let count = 0; 
     // Loop through the keys in object
     for (let key in obj) {
         const grade = obj[key]; // Grade value for key
 
         if (!isNaN(grade) && grade !== '') { // Check if grade is a number 
             const numericGrade = parseFloat(grade); // Convert to numeric value
 
             if (numericGrade >= 0 && numericGrade <= 100) { // Check the numeric grade is within range
                 total += numericGrade; // Add to total
                 count++; // Increment
             }
         }
     }
 
     if (count === 0) {
         return undefined; // Check if there are no valid grades
     }
 
     const avg = total / count;
     return parseFloat(avg.toFixed(1)); // Return the average rounded to 1 decimal place
 }
     
 

  /**
  * Convert an object to an array, where the keys are the first element in each subarray, and the values are the second element.
  * 
  * Example (input): {a: 1, b: 2, c: 3}
  * 
  * Example (output): [['a', 1], ['b', 2], ['c', 3]]
  * 
  * @param {object} obj
  * 
  * @returns {array}
  */
   function problemTwo(obj) {
    let arr = [];
    // Iterate through each key in the input object
    for (let key in obj) {
        const value = obj[key]; // Gets value associated with the current key
        arr.push([key, value]); // Create subarray with the key as first element, value as second
    }

    return arr;
   }
   
 
 /**
  * You are given a hand of five playing cards.
  * Each card is represented as an object with a suit and a value.
  * 
  * Example: [
  * {suit: 'clubs', value: 10},
  * {suit: 'hearts', value: 10},
  * {suit: 'spades', value: 1},
  * {suit: 'hearts', value: 'J'},
  * {suit: 'spades', value: 'A'}]
  * 
  * Write a function that return whether you have a 
  * straight flush, four of a kind, full house, flush, straight, three of a kind, two pair, one pair, or high card.
  * 
  * A straight flush is a hand that contains five cards of sequential value, all of the same suit.
  * A four of a kind is a hand that contains four cards of the same value.
  * A full house is a hand that contains three cards of one value, and two cards of another value.
  * A flush is a hand that contains five cards of the same suit.
  * A straight is a hand that contains five cards of sequential value.
  * A three of a kind is a hand that contains three cards of the same value.
  * A two pair is a hand that contains two cards of one value, and two cards of another value.
  * A one pair is a hand that contains two cards of the same value.
  * A high card is any hand that does not fit any of the above categories.
  * 
  * Think about how you would structure this logic to be easy to read and understand 
  * especially when it comes to the definitions of these hands.
  */
 function problemThree(hand)
 {  // Extract card values and suits from the hand
    const values = hand.map(card => card.value);
    const suits = hand.map(card => card.suit);
    // Count frequency of each card value
    const valueCounts = values.reduce((counts, value) => {
        counts[value] = (counts[value] || 0) + 1;
        return counts;
    }, {});
    // Finds maximum count of any card value
    const maxCount = Math.max(...Object.values(valueCounts)); 
    // Calculate number of unique suits in hand
    const uniqueSuits = new Set(suits).size;
    
    // Check for a straight flush
    if (uniqueSuits === 1 && maxCount === 5 && values[4] !== 'A' && values[0] !== '2') {
        // Compare card values and suits
        let isStraightFlush = true;
        for (let i = 0; i < hand.length - 1; i++) {
            if (suits[i] !== suits[i + 1] || '234567890JQKA'.indexOf(values[i]) + 1 !== '234567890JQKA'.indexOf(values[i + 1])) {
                isStraightFlush = false;
                break;
            }
        }
        if (isStraightFlush) {
            return 'straight flush';
        }
    }
    // Check four of a kind
    if (maxCount === 4) {
        return 'four of a kind';
    }

    const sortedCounts = Object.values(valueCounts).sort((a, b) => b - a);
    if (sortedCounts[0] === 3 && sortedCounts[1] === 2) {
        return 'full house';
    }
    // Check flush
    if (uniqueSuits === 1) {
        return 'flush';
    }

    if (values[4] === 'A' && values[0] === '10') {
        // Check straight by comparing card values
        let isStraight = true;
        for (let i = 0; i < hand.length - 1; i++) {
            if ('234567890JQKA'.indexOf(values[i]) + 1 !== '234567890JQKA'.indexOf(values[i + 1])) {
                isStraight = false;
                break;
            }
        }
        if (isStraight) {
            return 'straight';
        }
    }
    // Check three of a kind
    if (maxCount === 3) {
        return 'three of a kind';
    }
    // Check two or one pair
    if (maxCount === 2) {
        const pairCount = Object.values(valueCounts).filter(count => count === 2).length;
        return pairCount === 2 ? 'two pair' : 'one pair';
    }
    // If none of the above
    return 'high card';
}

 
 /**
  * Check if two objects are equal in keys and values. 
  * This has to handle deeply nested objects.
  * 
  * @param {object} objOne
  * 
  * @param {object} objTwo
  * 
  * @returns {boolean}
  * 
  */
  function problemFour(objOne, objTwo)
  {
       // Check both parameters are objects
       if (typeof objOne !== 'object' || typeof objTwo !== 'object') {
        return objOne === objTwo;
    }
    
    // Get keys of both objects
    const keysOne = Object.keys(objOne);
    const keysTwo = Object.keys(objTwo);

    // Check if the number of keys in both objects is the same
    if (keysOne.length !== keysTwo.length) {
        return false;
    }

    // Iterate through the keys of objOne
    for (const key of keysOne) {
        // Check if the key exists in objTwo
        if (!objTwo.hasOwnProperty(key)) {
            return false;
        }

        // Recursively compare the values with the current key
        if (!problemFour(objOne[key], objTwo[key])) {
            return false;
        }
    }

    // If all keys and values are the same, the objects are equal
    return true;
}
